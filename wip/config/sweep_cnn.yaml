# sweep_cnn.yaml
program: main.py
method: bayes

metric:
  name: val/auc
  goal: maximize

parameters:
  # Fixed experiment shape
  architecture: { value: simple_cnn }
  task:         { value: classification }
  run_cap:      { value: 20 }
  in_channels:  { value: 1 }
  input_shape:  { value: [256, 256] }
  num_classes:  { value: 2 }
  class_balance: { value: inverse }

  # Binary head
  binary_single_logit:        { value: true }
  binary_bce_from_two_logits: { value: false }

  # Exec / logging
  epochs:            { value: 40 }
  num_workers:       { value: 8 }
  seed:              { value: 42 }
  debug:             { value: true }
  debug_transforms:  { value: false }
  console_iter_log:  { value: false }
  console_epoch_log: { value: true }
  init_head_bias_from_prior: { value: true }
  init_threshold_from_prior: { value: false }

  # Two-pass validation + calibrator (candidate source)
  two_pass_val:   { value: true }
  log_calibrated: { value: true }

  calibration_method: { values: [rate_match, youden, f1] }
  cal_fallback:       { values: [rate_match, keep_last] }
  cal_q_bounds:       { value: [0.10, 0.90] }
  cal_min_tp:         { values: [5, 10, 20] }
  cal_bootstraps:     { values: [0, 25] }
  cal_warmup_epochs:  { values: [1, 2, 3] }
  cal_init_threshold: { values: [0.40, 0.50, 0.60] }
  cal_ema_beta:       { values: [0.10, 0.20, 0.30] }
  cal_max_delta:      { values: [0.05, 0.10, 0.20] }
  cal_rate_tolerance: { values: [0.10, 0.12, 0.15, 0.20] }  # feeds calibrator.cfg.rate_tolerance
  cal_auc_floor:      { values: [0.50, 0.55] }

  # Guardrails (authoritative acceptance layer)
  thr_warmup_epochs: { values: [1, 2, 3] }  # distinct from cal_warmup if desired
  thr_min:           { value: 0.05 }
  thr_max:           { value: 0.95 }
  thr_posrate_min:   { value: 0.05 }  # reject all-neg (≈0) and extreme envelopes
  thr_posrate_max:   { value: 0.95 }  # reject all-pos (≈1)
  thr_min_tp:        { values: [0, 5, 10] }  # optional count sanity
  thr_min_tn:        { values: [0, 5] }

  # Decision-health (optional, enforced after acceptance)
  enable_decision_health: { value: true }  # { values: [false, true] }
  health_warmup:          { value: 1 }  # { values: [0, 1, 2] }
  rate_tol_override:      { value: 0.10 }  # { values: [0.05, 0.10, 0.15] }  # ± tolerance around base rate

  # Loss / decision display (seed threshold only; acceptance overrides)
  cls_loss:       { value: auto }
  cls_decision:   { value: threshold }
  cls_threshold:  { value: 0.5 }
  positive_index: { value: 1 }

  # Core tunables
  batch_size:
    values: [32, 64]
  lr:
    distribution: log_uniform_values
    min: 0.00003
    max: 0.0003
  weight_decay:
    distribution: log_uniform_values
    min: 0.000005
    max: 0.00005
  dropout_rate:
    distribution: uniform
    min: 0.18
    max: 0.24

  # LR strategy
  lr_strategy:
    values: [none, cosine, warmcos, plateau]

  # Cosine
  T_max:   { value: 40 }
  eta_min: { value: 0.0 }

  # Warmup (used by warmcos)
  warmup_epochs:
    values: [0, 2, 3]
  warmup_start_factor:
    values: [0.1, 0.2]

  # Plateau
  plateau_metric:   { value: val/loss }
  plateau_mode:     { value: min }
  patience:         { value: 0 }
  factor:           { values: [0.5, 0.3] }
  plateau_threshold: { values: [0.0001, 0.0005] }

  # Param-group strategy
  param_groups:  { values: [single, split] }
  head_lr_scale: { value: 0.5 }
  head_wd_scale: { value: 1.5 }
  head_keys:     { value: ["head","classifier","mlp_head","fc","cls"] }
