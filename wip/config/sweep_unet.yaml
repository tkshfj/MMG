# sweep_unet.yaml
program: main.py
method: bayes

metric:
  name: val/dice
  goal: maximize

parameters:
  # Fixed experiment knobs
  architecture: {value: unet}
  task: {value: segmentation}
  run_cap: {value: 20}

  # Execution
  epochs: {value: 40}
  num_workers: {value: 12}
  debug: {value: true}
  debug_transforms: {value: false}
  console_iter_log: {value: false}
  console_epoch_log: {value: true}
  seed: {value: 42}
  init_head_bias_from_prior: { value: true }
  init_threshold_from_prior: { value: false }

  # Data / labels
  in_channels: {value: 1}
  input_shape: {value: [256, 256]}
  out_channels: {value: 2}
  batch_size: {values: [8, 16, 32]}

  # Model (UNet)
  features:
    values:
      - [16, 32, 64, 128, 256]
      - [32, 64, 128, 256, 512]
      - [32, 64, 128, 256]
  strides:
    values:
      - [2, 2, 2, 2]
      - [2, 2, 2]
  num_res_units: {values: [1, 2, 3]}

  # Loss weighting
  alpha: {values: [0.5, 1.0, 2.0]}
  beta:  {values: [0.25, 0.5, 1.0]}

  # Segmentation post-process
  seg_threshold: {value: 0.5}

  # Optimizer / weight decay
  optimizer: {value: adamw}
  weight_decay:
    distribution: log_uniform_values
    min: 0.00001
    max: 0.001

  # LR setup
  param_groups: {value: single}
  lr:
    distribution: log_uniform_values
    min: 0.0001
    max: 0.003
  head_lr_scale: 0.5       # lower LR on head
  head_wd_scale: 1.5       # slightly higher WD on head
  head_keys: ["head","classifier","mlp_head","fc","cls"]  # optional

  # LR scheduler
  lr_scheduler: {values: ["none", "cosine", "warmcos", "plateau"]}

  # Cosine params
  T_max: {value: 40}
  eta_min: {value: 0.0}

  # Warmup params
  warmup_epochs: {values: [0, 2, 3]}
  warmup_start_factor: {values: [0.1, 0.2]}

  # Plateau params
  plateau_metric: {value: val/loss}
  plateau_mode:   {value: min}
  patience: {values: [3, 6]}
  factor:   {values: [0.5, 0.3]}
  threshold: {value: 0.0001}
