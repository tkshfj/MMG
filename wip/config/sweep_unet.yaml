# sweep_unet.yaml
program: main.py
method: bayes

metric:
  name: val/dice
  goal: maximize

parameters:
  # Fixed
  architecture: { value: unet }
  task:         { value: segmentation }
  run_cap:      { value: 20 }

  # Execution
  epochs:            { value: 40 }
  num_workers:       { value: 12 }
  seed:              { value: 42 }
  debug:             { value: true }
  debug_transforms:  { value: false }
  console_iter_log:  { value: false }
  console_epoch_log: { value: true }

  # Data / labels
  in_channels:  { value: 1 }
  input_shape:  { value: [256, 256] }
  out_channels: { value: 2 }
  batch_size:   { values: [8, 16, 32] }

  # UNet topology
  # Code should derive strides from len(features):
  #   len=4 -> strides=[2,2,2]; len=5 -> strides=[2,2,2,2]
  features:
    values:
      - [16, 32, 64, 128]
      - [32, 64, 128, 256]
      - [32, 64, 128, 256, 512]
  num_res_units: { values: [1, 2, 3] }
  norm:          { values: [instance, batch] }
  act:           { values: [prelu, relu] }
  dropout:
    distribution: uniform
    min: 0.0
    max: 0.2

  # Loss weighting (e.g., Dice + CE)
  alpha: { values: [0.5, 1.0, 2.0] }
  beta:  { values: [0.25, 0.5, 1.0] }

  # Post-process
  seg_threshold: { value: 0.5 }

  # Optimizer / regularization
  optimizer: { value: adamw }
  weight_decay:
    distribution: log_uniform_values
    min: 0.00001
    max: 0.001

  # Learning rate (single param group is typical for UNet seg)
  param_groups: { value: single }
  lr:
    distribution: log_uniform_values
    min: 0.00003
    max: 0.0008

  # LR strategy (engine expects `lr_strategy`)
  lr_strategy: { values: [none, cosine, warmcos, plateau] }

  # Cosine
  T_max:   { value: 40 }
  eta_min: { value: 0.0 }

  # Warmcos
  warmup_epochs:       { values: [0, 2, 3] }
  warmup_start_factor: { values: [0.1, 0.2] }

  # Plateau (monitor sweep metric)
  plateau_metric:    { value: "val/dice" }
  plateau_mode:      { value: max }
  patience:          { values: [3, 6] }
  factor:            { values: [0.5, 0.3] }
  plateau_threshold: { values: [0.0001, 0.0005] }
