# sweep_mtlunet.yaml
program: main.py
method: bayes

metric:
  name: val/multi
  goal: maximize

parameters:
  # ---------------- Fixed experiment knobs ----------------
  architecture: {value: multitask_unet}
  task: {value: multitask}
  run_cap: {value: 20}

  # ---------------- Execution ----------------
  epochs: {value: 40}
  num_workers: {value: 12}
  debug: {value: true}
  debug_transforms: {value: false}
  console_iter_log: {value: false}
  console_epoch_log: {value: true}
  seed: {value: 42}

  # ---------------- Two-pass validation / calibration ----------------
  two_pass_val: {value: true}          # enables calibration pass
  log_calibrated: {value: true}        # log calibrated cls metrics

  # Calibrator core
  calibration_method:
    values: ["youden", "f1", "rate_match"]
  cal_q_bounds:
    value: [0.10, 0.90]                # window for threshold candidates
  cal_min_tp:
    values: [5, 10, 20]                # F1 guardrail
  cal_bootstraps:
    values: [0, 25]                    # 0 = off, else median over bootstraps

  # Stability guards
  cal_warmup_epochs:
    values: [1, 2, 3]
  cal_init_threshold:
    values: [0.40, 0.50, 0.60]
  cal_ema_beta:
    values: [0.10, 0.20, 0.30]
  cal_max_delta:
    values: [0.05, 0.10, 0.20]

  # Rate guard (keeps pos_rate near base rate)
  cal_rate_tolerance:
    values: [0.08, 0.10, 0.12, 0.15]

  # Weak-AUC handling
  cal_auc_floor:
    values: [0.50, 0.52, 0.55]
  cal_fallback:
    values: ["rate_match", "keep_last"]

  # ---------------- Data / model topology ----------------
  in_channels: {value: 1}
  input_shape: {value: [256, 256]}
  num_classes: {value: 2}
  class_counts: {value: [331, 232]}     # drives base rate & pos_weight derivation
  class_balance: {value: inverse}       # inverse | effective | none

  # Binary classifier head behavior
  binary_single_logit: {value: true}    # emit 1 logit for binary classification
  binary_bce_from_two_logits: {value: false}  # bridge legacy 2-logit → BCE (pos-neg)

  # ---------------- Loss options ----------------
  cls_loss: {value: auto}               # auto | bce | ce | focal
  # pos_weight: {value: 1.7}            # optional manual override (usually omit)

  # ---------------- Segmentation post-process ----------------
  seg_threshold: {value: 0.5}           # for sigmoid binary seg

  # ---------------- Multi-task / objective ----------------
  multi_weight: {value: 0.65}           # weight for Dice in val/multi
  alpha: {values: [1.0, 2.0]}           # cls loss weight
  beta:  {values: [0.5, 1.0]}           # seg loss weight

  # ---------------- Core tunables ----------------
  batch_size: {values: [32, 64]}
  lr:
    distribution: log_uniform_values
    min: 0.00003
    max: 0.0008
  weight_decay:
    distribution: log_uniform_values
    min: 0.00001
    max: 0.00005
  dropout_rate:
    distribution: uniform
    min: 0.18
    max: 0.24

  # ---------------- LR scheduler ----------------
  # lr_scheduler: {values: ["none", "cosine", "warmcos", "plateau"]}
  lr_scheduler: {value: "plateau"}
  # lr_strategy: {values: ["none", "cosine", "warmcos", "plateau"]}

  # Cosine params
  T_max: {value: 40}
  eta_min: {value: 0.0}

  # Warmup params (used when warmcos)
  warmup_epochs: {values: [0, 2, 3]}
  warmup_start_factor: {values: [0.1, 0.2]}

  # Plateau params
  plateau_metric: {value: val/auc}         # trainer.state.metrics key; two-pass stores 'loss'
  plateau_mode:   {value: max}          # min | max
  patience: {values: [3, 6]}
  factor:   {values: [0.5, 0.3]}
  threshold: {value: 0.0001}            # change sensitivity for Plateau

  # ---------------- Classification decision defaults (std pass) ----------------
  # Two-pass will overwrite threshold each epoch via cal_thr when available.
  cls_decision:  {value: threshold}     # "argmax" | "threshold"
  cls_threshold: {value: 0.5}
  positive_index: {value: 1}            # ignored for single-logit, used for 2-logit

early_terminate:
  type: hyperband
  min_iter: 4

# NOTE:
# val_multi gets registered whenever both val_auc and val_dice exist
# get_loss_fn reads alpha, beta
# Optimizer uses cfg.lr and cfg.weight_decay
# Model reads cfg.dropout_rate
# Remove/ignore patch_size for UNet, or gate by architecture

# IMPORTANT: make sure we log a scalar macro mean as "val/multi"
# (or change name below to "val/multi_mean" if that’s what we emit)
