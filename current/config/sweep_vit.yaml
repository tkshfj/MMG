# sweep_vit.yaml
program: main.py
method: bayes

metric:
  name: val_auc
  goal: maximize

parameters:
  # Core
  architecture:        {value: vit}
  task:                {value: classification}
  run_cap:             {value: 20}
  debug:               {value: true}
  debug_transforms:    {value: false}

  # Class imbalance (prefer counts; enables bias init + inverse-freq weights)
  class_counts:        {value: [331, 232]}
  # For explicit weights instead, comment the above and set:
  # class_weights:     {values: [[0.7, 1.3], [1.0, 1.0]]}

  # Data
  epochs:              {value: 40}
  input_shape:         {value: [256, 256]}
  in_channels:         {value: 1}
  patch_size:          {value: 16}
  num_classes:         {value: 2}
  num_workers:         {value: 12}
  batch_size:
    values: [16, 32, 64]

  # Model (ViT)
  hidden_size:
    values: [384, 512, 768]
  mlp_dim:
    values: [1536, 2048, 3072]
  num_layers:
    values: [8, 10, 12]
  num_heads:
    values: [6, 8, 12]
  dropout_rate:
    distribution: uniform
    min: 0.10
    max: 0.30

  # Optimizer / LR
  optimizer:           {value: adamw}
  weight_decay:
    distribution: log_uniform_values
    min: 0.00001
    max: 0.001

  # choose: "single" or "split"
  lr_strategy:
    values: ["single", "split"]

  # Single-group LR (only when lr_strategy == "single")
  lr:
    distribution: log_uniform_values
    min: 0.001
    max: 0.003

  # Split LRs (only when lr_strategy == "split")
  base_lr:
    distribution: log_uniform_values
    min: 0.00002
    max: 0.0001

  head_multiplier:
    values: [5.0, 10.0, 15.0]   # head_lr = base_lr * head_multiplier
