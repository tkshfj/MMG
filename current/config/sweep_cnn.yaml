# sweep_cnn.yaml
program: main.py
method: bayes

metric:
  name: val/auc
  goal: maximize

parameters:
  # ---------------- Fixed experiment knobs ----------------
  architecture: {value: simple_cnn}
  task: {value: classification}
  run_cap: {value: 20}

  # ---------------- Execution ----------------
  epochs: {value: 40}
  num_workers: {value: 8}
  debug: {value: true}
  debug_transforms: {value: false}
  console_iter_log: {value: false}
  console_epoch_log: {value: true}
  seed: {value: 42}

  # ---------------- Two-pass validation / calibration (classification only) ----------------
  two_pass_val: {value: true}
  log_calibrated: {value: true}

  calibration_method:
    values: ["youden", "f1", "rate_match"]
  cal_q_bounds: {value: [0.10, 0.90]}
  cal_min_tp: {values: [5, 10, 20]}
  cal_bootstraps: {values: [0, 25]}

  cal_warmup_epochs: {values: [1, 2, 3]}
  cal_init_threshold: {values: [0.40, 0.50, 0.60]}
  cal_ema_beta: {values: [0.10, 0.20, 0.30]}
  cal_max_delta: {values: [0.05, 0.10, 0.20]}
  cal_rate_tolerance: {values: [0.08, 0.10, 0.12, 0.15]}
  cal_auc_floor: {values: [0.50, 0.52, 0.55]}
  cal_fallback: {values: ["rate_match", "keep_last"]}

  # ---------------- Data / model topology ----------------
  in_channels: {value: 1}
  input_shape: {value: [256, 256]}
  num_classes: {value: 2}
  class_counts: {value: [331, 232]}
  class_balance: {value: inverse}

  # Binary classifier head behavior
  binary_single_logit: {value: true}
  binary_bce_from_two_logits: {value: false}

  # ---------------- Loss options ----------------
  cls_loss: {value: auto}

  # ---------------- Core tunables ----------------
  batch_size: {values: [32, 64]}
  lr:
    distribution: log_uniform_values
    min: 0.00003
    max: 0.0008
  weight_decay:
    distribution: log_uniform_values
    min: 0.00001
    max: 0.00005
  dropout_rate:
    distribution: uniform
    min: 0.18
    max: 0.24

  # ---------------- LR scheduler ----------------
  lr_scheduler: {values: ["none", "cosine", "warmcos", "plateau"]}

  # Cosine params
  T_max: {value: 40}
  eta_min: {value: 0.0}

  # Warmup params
  warmup_epochs: {values: [0, 2, 3]}
  warmup_start_factor: {values: [0.1, 0.2]}

  # Plateau params
  plateau_metric: {value: val/loss}
  plateau_mode:   {value: min}
  patience: {values: [3, 6]}
  factor:   {values: [0.5, 0.3]}
  threshold: {value: 0.0001}

  # ---------------- Classification decision defaults ----------------
  cls_decision:  {value: threshold}
  cls_threshold: {value: 0.5}
  positive_index: {value: 1}

early_terminate:
  type: hyperband
  min_iter: 4

# NOTE:
# val_multi gets registered whenever both val_auc and val_dice exist
# get_loss_fn reads alpha, beta
# Optimizer uses cfg.lr and cfg.weight_decay
# Model reads cfg.dropout_rate
# Remove/ignore patch_size for UNet, or gate by architecture

# IMPORTANT: make sure we log a scalar macro mean as "val/multi"
# (or change name below to "val/multi_mean" if thatâ€™s what we emit)

# program: main.py
# method: bayes

# metric:
#   name: val/auc
#   goal: maximize

# parameters:
#   # Fixed knobs
#   architecture: {value: simple_cnn}
#   task: {value: classification}
#   run_cap: {value: 20}

#   # Execution
#   epochs: {value: 40}
#   num_workers: {value: 2}
#   debug: {value: true}
#   debug_transforms: {value: false}

#   # Data
#   in_channels: {value: 1}
#   input_shape: {value: [256, 256]}
#   num_classes: {value: 2}
#   class_counts: {value: [331, 232]}  # {value: null}; enables CE class weighting via BaseModel

#   # Core tunables
#   batch_size:
#     values: [32, 64]
#   lr:
#     distribution: log_uniform_values
#     min: 0.00003
#     max: 0.0008
#   weight_decay:
#     distribution: log_uniform_values
#     min: 0.00001
#     max: 0.00005
#   dropout_rate:
#     distribution: uniform
#     min: 0.18
#     max: 0.24

#   # LR strategy (epoch-level)
#   lr_strategy:
#     values: ["none", "cosine", "warmcos", "plateau"]

#   # Cosine params (used by "cosine" & the cosine part of "warmcos")
#   T_max: {value: 40}   # tie to epochs
#   eta_min: {value: 0.0}

#   # Warmup + Cosine
#   warmup_epochs:
#     values: [0, 2, 3]
#   warmup_start_factor:
#     values: [0.1, 0.2]

#   # Plateau (after validation)
#   monitor: {value: val/loss}
#   monitor_mode: {value: min}
#   patience:
#     values: [3, 6]
#   factor:
#     values: [0.5, 0.3]

# # Optional early termination
# early_terminate:
#   type: hyperband
#   min_iter: 4
