# sweep_unet.yaml
program: main.py
method: bayes

metric:
  name: val/dice
  goal: maximize

parameters:
  # --- Core / execution ---
  architecture:        { value: unet }
  task:                { value: segmentation }
  run_cap:             { value: 20 }
  epochs:              { value: 40 }
  num_workers:         { value: 12 }
  debug:               { value: true }
  debug_transforms:    { value: false }

  # --- Data / labels ---
  in_channels:         { value: 1 }
  input_shape:         { value: [256, 256] }
  out_channels:        { value: 2 }           # background + lesion (adjust if needed)
  batch_size:
    values: [8, 16, 32]

  # (Optional) class weighting for CE part if your centralized loss uses it
  # class_weights:
  #   values: [[0.3, 1.7], [0.5, 1.5], [1.0, 1.0]]

  # --- Model (UNet) ---
  # MONAI UNet expects explicit "channels" and "strides" (lengths must match: len(strides) = len(channels) - 1)
  features:
    values:
      - [16, 32, 64, 128, 256]
      - [32, 64, 128, 256, 512]
      - [32, 64, 128, 256]      # shallower net
  strides:
    values:
      - [2, 2, 2, 2]
      - [2, 2, 2]               # for the 4-level variant above
  num_res_units:
    values: [1, 2, 3]

  # --- Loss weighting (read by centralized get_loss_fn for segmentation) ---
  # e.g., DiceCE = alpha * Dice + beta * CE
  alpha: { values: [0.5, 1.0, 2.0] }
  beta:  { values: [0.25, 0.5, 1.0] }

  # --- Optimizer / weight decay ---
  optimizer: { value: adamw }
  weight_decay:
    distribution: log_uniform_values
    min: 0.00001
    max: 0.001

  # --- LR setup ---
  # Keep a single LR group for UNet unless you explicitly implement param splits
  param_groups: { value: single }

  # Learning rate (single group)
  lr:
    distribution: log_uniform_values
    min: 0.0001
    max: 0.003

  # --- LR scheduler (epoch-level) ---
  # "none"    : fixed LR
  # "cosine"  : CosineAnnealingLR(T_max, eta_min)
  # "warmcos" : Linear warmup â†’ cosine
  # "plateau" : ReduceLROnPlateau(monitor, factor, patience)
  scheduler:
    values: ["none", "cosine", "warmcos", "plateau"]

  # Cosine-only params (used by "cosine" and cosine part of "warmcos")
  T_max:   { value: 40 }   # typically tie to epochs
  eta_min: { value: 0.0 }

  # Warmup (only when scheduler == "warmcos")
  warmup_epochs:       { values: [0, 2, 3] }
  warmup_start_factor: { values: [0.1, 0.2] }

  # Plateau (only when scheduler == "plateau")
  monitor:      { value: val_loss }
  monitor_mode: { value: min }
  patience:     { values: [3, 6] }
  factor:       { values: [0.5, 0.3] }

# Early termination to save budget
early_terminate:
  type: hyperband
  min_iter: 4
